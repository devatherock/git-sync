docker_image: &docker_image
  docker:
    - image: cimg/openjdk:17.0
      auth:
        username: $DOCKER_USERNAME
        password: $DOCKER_PASSWORD
    
resource_class: &resource_class    
  resource_class: small
  
work_directory: &work_directory
  working_directory: ~/git-sync

release_filter: &release_filter
  filters:
    branches:
      only: non-existent-branch
    tags:
      only: /^v[0-9\.]+$/

pr_filter: &pr_filter
  filters:
    branches:
      ignore: master
  
executors:
  docker-executor:
    <<: *docker_image
    <<: *resource_class
    <<: *work_directory
  machine-executor:
    machine:
      image: ubuntu-2204:2023.04.2
    resource_class: medium
    <<: *work_directory
  arm-executor:
    machine:
      image: ubuntu-2004:2022.04.1
    resource_class: arm.medium
    <<: *work_directory  
  
version: 2.1
jobs:
  test:
    executor: docker-executor
    steps:
      - add_ssh_keys:
          fingerprints:
            - "4a:86:fe:0e:c3:0e:ad:0d:1d:5c:3e:48:cf:28:39:5d"
      - checkout
      - attach_workspace:
          at: ~/git-sync
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies-
      - run: |
          sh unit-tests.sh
      - store_artifacts:
          path: build/reports/jacoco
      - store_test_results:
          path: build/test-results
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}    

  groovy_script_to_jar:
    docker:
      - image: devatherock/scriptjar:1.0.0
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    <<: *resource_class
    <<: *work_directory
    environment:
      PLUGIN_SCRIPT_PATH: SyncGitRepos.groovy
    steps:
      - checkout
      - run: sh /scripts/entry-point.sh
      - persist_to_workspace:
          root: ~/git-sync
          paths:
            - SyncGitRepos.jar
            
  docker_build_dry_run:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: ~/git-sync
      - run: |
          docker buildx create --name rockbuilder \
            --driver docker-container --use --bootstrap
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            -f docker/Dockerfile .
      
  publish:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: ~/git-sync
      - run: |
          TAG=${CIRCLE_SHA1:0:8}
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker buildx create --name rockbuilder \
            --driver docker-container --use --bootstrap
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --push \
            -t devatherock/git-sync:$TAG \
            -t devatherock/git-sync:latest \
            -f docker/Dockerfile .
          
  dockerhub_readme:
    executor: machine-executor
    steps:
      - checkout
      - run: |
          docker run -v $PWD:/workspace \
              -e DOCKERHUB_USERNAME \
              -e DOCKERHUB_PASSWORD \
              -e DOCKERHUB_REPOSITORY='devatherock/git-sync' \
              -e SHORT_DESCRIPTION='CI plugin to sync the contents of a git repository with another' \
              -e README_FILEPATH='/workspace/README.md' \
              peterevans/dockerhub-description:3.4.1 
          
  functional_test:
    parameters:
      runner:
        type: executor
    executor: << parameters.runner >>
    steps:
      - add_ssh_keys:
          fingerprints:
            - "4a:86:fe:0e:c3:0e:ad:0d:1d:5c:3e:48:cf:28:39:5d"
      - checkout
      - attach_workspace:
          at: ~/git-sync
      - restore_cache:
          keys:
            - v1-integration-{{ checksum "build.gradle" }}
            - v1-integration-
      - run: |
          sh functional-tests.sh
      - store_test_results:
          path: build/test-results
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-integration-{{ checksum "build.gradle" }}
          
  publish_release:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: ~/git-sync
      - run: |
          TAG=${CIRCLE_TAG#v}
          DEV_TAG=${CIRCLE_SHA1:0:8}
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker buildx create --name rockbuilder \
            --driver docker-container --use --bootstrap
          docker buildx imagetools create \
            -t devatherock/git-sync:$TAG devatherock/git-sync:$DEV_TAG
          
  notify:
    docker:
      - image: devatherock/simple-slack:0.7.0
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    <<: *resource_class
    environment:
      TEXT: "Success: {{.CircleBuildUrl}} by {{.CircleUsername}}"
      COLOR: "#33ad7f"
      CHANNEL: general
      TITLE: "Build completed"
    steps:
      - run: /bin/simpleslack

workflows:
  version: 2.1
  build_publish:
    jobs:
      - test:
          context:
            - docker-credentials
          filters:
            branches:
              only: master
      - groovy_script_to_jar:
          context:
            - docker-credentials
          filters:
            branches:
              only: master
          requires:
            - test
      - publish:
          context:
            - docker-credentials
          requires:
            - groovy_script_to_jar
      - dockerhub_readme:
          context:
            - docker-credentials
            - dockerhub-readme-credentials
          requires:
            - publish
      - functional_test:
          name: functional_test_amd
          context:
            - docker-credentials
            - git-token
          runner: machine-executor
          requires:
            - dockerhub_readme
      - functional_test:
          name: functional_test_arm
          context:
            - docker-credentials
            - git-token
          runner: arm-executor
          requires:
            - functional_test_amd
      - notify:
          context:
            - docker-credentials
            - slack-webhook
          requires:
            - functional_test_arm

  release:
    jobs:
      - publish_release:
          context:
            - docker-credentials
          <<: *release_filter
      - notify:
          context:
            - docker-credentials
            - slack-webhook
          <<: *release_filter
          requires:
            - publish_release
  pr_check:
    jobs:
      - test:
          context:
            - docker-credentials
          <<: *pr_filter
      - groovy_script_to_jar:
          context:
            - docker-credentials
          <<: *pr_filter
          requires:
            - test    
      - docker_build_dry_run:
          context:
            - docker-credentials
          requires:
            - groovy_script_to_jar